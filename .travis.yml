# ============================================================================
#                         Copyright 2019 Gennaro Prota
#
#                   Licensed under the 3-Clause BSD License.
#              (See accompanying file 3_CLAUSE_BSD_LICENSE.txt or
#               <https://opensource.org/licenses/BSD-3-Clause>.)
# ____________________________________________________________________________

language: cpp
script: BREATH_ROOT=` pwd ` && export BREATH_ROOT && make

matrix:
    #       TODO:
    #
    #        - check the minimum supported version of Clang
    #
    #        - build with Visual C++ as well
    # ------------------------------------------------------------------------
    include:
        - os: linux
          dist: xenial

          addons:
            apt:
                sources:
                    - ubuntu-toolchain-r-test
                packages:
                    - g++-6

          env:
            - system=unix compiler=gcc compiler_command=g++-6

          name: "GCC 6 on Ubuntu 16.04 (Xenial)"

        - os: linux
          dist: xenial

          env:
            - system=unix compiler=clang

          name: "Clang 7 on Ubuntu 16.04 (Xenial)"

        - os: linux
          dist: xenial

          addons:
            apt:
                sources:
                    - ubuntu-toolchain-r-test
                packages:
                    - g++-7
          env:
            - system=unix compiler=gcc compiler_command=g++-7

          name: "GCC 7 on Ubuntu 16.04 (Xenial)"

        - os: linux
          dist: xenial

          addons:
            apt:
                sources:
                    - llvm-toolchain-xenial-8
                packages:
                    - clang-8

          env:
            - system=unix compiler=clang compiler_command=clang++-8

          name: "Clang 8 on Ubuntu 16.04 (Xenial)"

        - os: linux
          dist: xenial

          addons:
            apt:
                sources:
                    - ubuntu-toolchain-r-test
                packages:
                    - g++-8
          env:
            - system=unix compiler=gcc compiler_command=g++-8

          name: "GCC 8 on Ubuntu 16.04 (Xenial)"

        - os: linux
          dist: xenial

          addons:
            apt:
                packages:
                    - libc++-dev

          env:
            - system=unix compiler=clang cpp_extra_options=-stdlib=libc++

          name: "Clang 7 with libc++ on Ubuntu 16.04 (Xenial)"



        #       Build jobs using sanitizers.
        # --------------------------------------------------------------------
        - os: linux
          dist: focal

          addons:
            apt:
                sources:
                    - ubuntu-toolchain-r-test
                packages:
                    - g++-10
          env:
            - ASAN_OPTIONS="check_initialization_order=true" system=unix compiler=gcc compiler_command=g++-10 cpp_extra_options=-fsanitize=address

          name: "GCC 10 with AddressSanitizer on Ubuntu 20.04 (Focal)"

        - os: linux
          dist: focal

          addons:
            apt:
                sources:
                    - ubuntu-toolchain-r-test
                packages:
                    - g++-10
          env:
            - system=unix compiler=gcc compiler_command=g++-10 cpp_extra_options="-fsanitize=undefined,thread"

          name: "GCC 10 with UndefinedBehaviorSanitizer and ThreadSanitizer on Ubuntu 20.04 (Focal)"

        - os: linux
          dist: focal

          addons:
            apt:
                packages:
                    - clang-11
                sources:
                    - sourceline: 'ppa:ubuntu-toolchain-r/test'
                    - sourceline: 'deb http://apt.llvm.org/focal/ llvm-toolchain-focal-11 main'
                      key_url: 'https://apt.llvm.org/llvm-snapshot.gpg.key'

          env:
            - ASAN_OPTIONS="check_initialization_order=true" system=unix compiler=clang compiler_command=clang++-11 cpp_extra_options="-fsanitize=address -O1 -fno-omit-frame-pointer -fno-optimize-sibling-calls"

          name: "Clang 11 with AddressSanitizer on Ubuntu 20.04 (Focal)"

        - os: linux
          dist: focal


          addons:
            apt:
                packages:
                    - clang-11
                sources:
                    - sourceline: 'ppa:ubuntu-toolchain-r/test'
                    - sourceline: 'deb http://apt.llvm.org/focal/ llvm-toolchain-focal-11 main'
                      key_url: 'https://apt.llvm.org/llvm-snapshot.gpg.key'

          env:
            #       Use -O2, because, with -O1, the SHA-384 tests will
            #       run for more than 10 minutes without producing any
            #       output, which causes Travis CI to terminate the
            #       build job.
            # ----------------------------------------------------------------
            - system=unix compiler=clang compiler_command=clang++-11 cpp_extra_options="-fsanitize=undefined,thread -O2 -fno-omit-frame-pointer -fno-optimize-sibling-calls"

          name: "Clang 11 with UndefinedBehaviorSanitizer and ThreadSanitizer on Ubuntu 20.04 (Focal)"


        #       Build jobs on IBM Z, which is big-endian
        # --------------------------------------------------------------------
        - os: linux
          dist: focal
          arch: s390x

          addons:
            apt:
                sources:
                    - ubuntu-toolchain-r-test
                packages:
                    - g++-10
          env:
            - architecture=s390x system=unix compiler=gcc compiler_command=g++-10

          name: "GCC 10 on IBM Z and Ubuntu 20.04 (Focal)"

        - os: freebsd

          env:
            - system=unix compiler=clang

          name: "Clang 8.0.1 on FreeBSD 12.1"

    allow_failures:
        os: freebsd

# Local Variables:
# mode: yaml
# indent-tabs-mode: nil
# End:
# vim: set ft=yaml et sts=4 sw=4:
