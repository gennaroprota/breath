# ============================================================================
#                         Copyright 2020 Gennaro Prota
#
#                   Licensed under the 3-Clause BSD License.
#              (See accompanying file 3_CLAUSE_BSD_LICENSE.txt or
#               <https://opensource.org/licenses/BSD-3-Clause>.)
# ____________________________________________________________________________
#
#       GitHub continuous integration.
#
#       This configures the builds (plus tests) to run automatically on
#       pushes and other events.
# ----------------------------------------------------------------------------


#       TODO:
#         there's a lot of duplication in this file: can't 'runs-on' use
#         a matrix??
# ----------------------------------------------------------------------------

name: builds_and_tests
on:   [push, pull_request]

jobs:
  clang-on-linux:
    name: Clang on Linux
    runs-on: ubuntu-latest
    strategy:
      matrix:
        compiler: [ clang++-10, clang++-11 ]
        build_type: [debug, optimized]

    steps:
      - uses: actions/checkout@v2
      - name: Builds and tests
        env:
          system: unix
          compiler: clang
          compiler_command: ${{matrix.compiler}}
          build_type: ${{matrix.build_type}}
        run: BREEZE_ROOT=$( pwd ) && export BREEZE_ROOT && make

  gcc-on-linux:
    name: GCC on Linux
    runs-on: ubuntu-latest
    strategy:
      matrix:
        compiler: [ g++-9, g++-10 ]
        build_type: [debug, optimized]

    steps:
      - uses: actions/checkout@v2
      - name: Builds and tests
        env:
          system: unix
          compiler: gcc
          compiler_command: ${{matrix.compiler}}
          build_type: ${{matrix.build_type}}
        run: BREEZE_ROOT=$( pwd ) && export BREEZE_ROOT && make

  clang-on-macos:
    name: Clang on macOS
    runs-on: macos-latest
    strategy:
      matrix:
        compiler: [ clang++ ]
        build_type: [debug, optimized]

    steps:
      - uses: actions/checkout@v2
      - name: Builds and tests
        env:
          system: macos
          compiler: clang
          compiler_command: ${{matrix.compiler}}
          build_type: ${{matrix.build_type}}

          #     Is there a way to avoid turning off this option?
          # ------------------------------------------------------------------
          cpp_extra_options: -Wno-poison-system-directories
        run: BREEZE_ROOT=$( pwd ) && export BREEZE_ROOT && make

  gcc-on-macos:
    name: GCC on macOS
    runs-on: macos-latest
    strategy:
      matrix:
        compiler: [ g++-8, g++-9 ]
        build_type: [debug, optimized]

    steps:
      - uses: actions/checkout@v2
      - name: Builds and tests
        env:
          system: macos
          compiler: gcc
          compiler_command: ${{matrix.compiler}}
          build_type: ${{matrix.build_type}}
        run: BREEZE_ROOT=$( pwd ) && export BREEZE_ROOT && make

  #     As of this writing (December 28, 2020), GitHub Actions doesn't
  #     directly support FreeBSD. But the macOS machines have VirtualBox
  #     installed, so we run FreeBSD in a VirtualBox virtual machine
  #     hosted by macOS.
  #
  #     For reference, see:
  #
  #       <https://github.com/marketplace/actions/freebsd-vm>.
  # --------------------------------------------------------------------------
  gcc-on-freebsd:
    name: GCC on FreeBSD
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v2
    - uses: vmactions/freebsd-vm@v0.1.4
      with:
        usesh: true
        mem: 2048
        run: |
          export system=unix
          export compiler=gcc
          export ASSUME_ALWAYS_YES=YES
          export build_type=debug

          #       We got errors with the default FreeBSD shell, when
          #       launching commands from Make, along the lines of "-e:
          #       not found". This suggests that the default shell
          #       doesn't understand the -e option, which we pass
          #       through GNU Make's variable .SHELLFLAGS.
          #
          #       Since ascertaining the actual issue is difficult if
          #       you don't have true access to the machine, I decided
          #       to just install Bash and set it as default shell,
          #       here.
          # ------------------------------------------------------------------
          pkg install bash
          chsh -s /usr/local/bin/bash
          pkg install gmake
          pkg install lang/gcc
          pkg install python3
          export BREEZE_ROOT=$( pwd )
          gmake
