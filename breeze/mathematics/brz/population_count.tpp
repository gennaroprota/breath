// ===========================================================================
//                        Copyright 2017 Gennaro Prota
//
//                  Licensed under the 3-Clause BSD License.
//             (See accompanying file 3_CLAUSE_BSD_LICENSE.txt or
//              <https://opensource.org/licenses/BSD-3-Clause>.)
// ___________________________________________________________________________

#include "breeze/counting/signed_count.hpp"
#include "breeze/meta/has_sign.hpp"

#include <climits>

namespace breeze_ns {
namespace population_count_private {

//      Table generated by generate_bit_count_table: see the extra/
//      subdirectory.
// ---------------------------------------------------------------------------
constexpr unsigned char
                    count_table[] =
{
    0, 1, 1, 2, 1, 2, 2, 3, 1, 2, 2, 3, 2, 3, 3, 4,
    1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5,
    1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5,
    2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6,
    1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5,
    2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6,
    2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6,
    3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7,
    1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5,
    2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6,
    2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6,
    3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7,
    2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6,
    3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7,
    3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7,
    4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8
} ;

constexpr int       table_width = 8 ;

static_assert( breeze::signed_count( count_table ) == ( 1u << table_width ),
               "" ) ;

//      This equality isn't necessary for the code to work; but, if you
//      have e.g. UCHAR_MAX == 511 you might want to enlarge the table.
// ---------------------------------------------------------------------------
static_assert( breeze::signed_count( count_table ) == ( UCHAR_MAX + 1 ), "" ) ;

}

template< typename T >
constexpr int
population_count( T t ) noexcept
{
    using namespace population_count_private ;

    static_assert( ! has_sign< T >::value, "" ) ;

    int                 count = 0 ;
    while ( t != 0 ) {
        count += count_table[ t & ( ( 1u << table_width ) - 1 ) ] ;

    //      Clang gives a -Wshift-count-overflow warning on this when
    //      `T` is `unsigned char`, apparently ignoring the fact that
    //      `t` is promoted.
    //
    //      (Problem encountered with Clang 5.0.1.)
    // -----------------------------------------------------------------------
#   pragma clang diagnostic push
#   pragma clang diagnostic ignored "-Wshift-count-overflow"
    // -----------------------------------------------------------------------

        t >>= table_width ;

#   pragma clang diagnostic pop
    }
    return count ;
}

}

// Local Variables:
// mode: c++
// End:
// vim: set ft=cpp:
